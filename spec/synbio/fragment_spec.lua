local fragment = require("test.synbio.fragment")

describe("fragment", function()
  describe("fragment_sequence", function()
    it("should properly fragment a sequence", function()
      local desired_fragments = {"ATGAAAAAATTTAACTGGAAGAAAATAGTCGCGCCAATTGCAATGCTAATTATTGGCTTACTAGGTGGTTTACTTGGTGCCTTTATCCTACTAACAGCAGCCGGGGTATC","TATCTTTTACCAATACAACAGATACTGGAGTAAAAACGGCTAAGACCGTCTACACCAATATAACAGATACAACTAAGGCTGTTAAGAAAGTACAAAATGCCGTTGTTTCT","TTCTGTCATCAATTATCAAGAAGGTTCATCTTCAGATTCTCTAAATGACCTTTATGGCCGTATCTTTGGCGGAGGGGACAGTTCTGATTCTAGCCAAGAAAATTCAAAAG","AAAGATTCAGATGGTCTACAGGTCGCTGGTGAAGGTTCTGGAGTCATCTATAAAAAAGATGGCAAAGAAGCCTACATCGTAACCAATAACCATGTTGTCGATGGGGCTAA","CTAAAAAACTTGAAATCATGCTTTCGGATGGTTCGAAAATTACTGGTGAACTTGTTGGTAAAGACACTTACTCTGACCTAGCAGTTGTCAAAGTATCTTCAGATAAAATA","AATAACAACTGTTGCAGAATTTGCAGACTCAAACTCCCTTACTGTTGGTGAAAAAGCAATTGCTATCGGTAGCCCACTTGGTACCGAATACGCCAACTCAGTAACAGA","CAGAAGGAATCGTTTCTAGCCTTAGCCGTACTATAACGATGCAAAACGATAATGGTGAAACTGTATCAACAAACGCTATCCAAACAGATGCAGCCATTAACCCTGGTAA","GTAACTCTGGTGGTGCCCTAGTCAATATTGAAGGACAAGTTATCGGTATTAATTCAAGTAAAATTTCATCAACGTCTGCAGTCGCTGGTAGTGCTGTTGAAGGTATGGGG","GGGGTTTGCCATTCCATCAAACGATGTTGTTGAAATCATCAATCAATTAGAAAAAGATGGTAAAGTTACACGACCAGCACTAGGAATCTCAATAGCAGATCTTAATAGCC","AGCCTTTCTAGCAGCGCAACTTCTAAATTAGATTTACCAGATGAGGTCAAATCCGGTGTTGTTGTCGGTAGTGTTCAGAAAGGTATGCCAGCTGACGGTAAACTTCAA","TCAAGAATATGATGTTATCACTGAGATTGATGGTAAGAAAATCAGCTCAAAAACTGATATTCAAACCAATCTTTACAGCCATAGTATCGGAGATACTA","ACTATCAAGGTAACCTTCTATCGTGGTAAAGATAAGAAAACTGTAGATCTTAAATTAACAAAATCTACAGAAGACATATCTGATTAA"}
      local gene = "atgaaaaaatttaactggaagaaaatagtcgcgccaattgcaatgctaattattggcttactaggtggtttacttggtgcctttatcctactaacagcagccggggtatcttttaccaatacaacagatactggagtaaaaacggctaagaccgtctacaccaatataacagatacaactaaggctgttaagaaagtacaaaatgccgttgtttctgtcatcaattatcaagaaggttcatcttcagattctctaaatgacctttatggccgtatctttggcggaggggacagttctgattctagccaagaaaattcaaaagattcagatggtctacaggtcgctggtgaaggttctggagtcatctataaaaaagatggcaaagaagcctacatcgtaaccaataaccatgttgtcgatggggctaaaaaacttgaaatcatgctttcggatggttcgaaaattactggtgaacttgttggtaaagacacttactctgacctagcagttgtcaaagtatcttcagataaaataacaactgttgcagaatttgcagactcaaactcccttactgttggtgaaaaagcaattgctatcggtagcccacttggtaccgaatacgccaactcagtaacagaaggaatcgtttctagccttagccgtactataacgatgcaaaacgataatggtgaaactgtatcaacaaacgctatccaaacagatgcagccattaaccctggtaactctggtggtgccctagtcaatattgaaggacaagttatcggtattaattcaagtaaaatttcatcaacgtctgcagtcgctggtagtgctgttgaaggtatggggtttgccattccatcaaacgatgttgttgaaatcatcaatcaattagaaaaagatggtaaagttacacgaccagcactaggaatctcaatagcagatcttaatagcctttctagcagcgcaacttctaaattagatttaccagatgaggtcaaatccggtgttgttgtcggtagtgttcagaaaggtatgccagctgacggtaaacttcaagaatatgatgttatcactgagattgatggtaagaaaatcagctcaaaaactgatattcaaaccaatctttacagccatagtatcggagatactatcaaggtaaccttctatcgtggtaaagataagaaaactgtagatcttaaattaacaaaatctacagaagacatatctgattaa"
      local fragments, efficiency = fragment.fragment_sequence(gene, 90, 110)
      for idx, frag in ipairs(fragment) do
        assert(frag, desired_fragments[idx])
      end
      assert(efficiency, 1)
    end)
  end)
end)
